{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","currentPanel","setCurrentPanel","id","title","isActive","moods","setMoods","visible","setVisible","setActiveMood","newMoods","map","mood","activePanel","left","onClick","right","height","width","aside","style","display","flexDirection","justifyContent","fontSize","marginBottom","border","outline","placeholder","marginLeft","marginRight","borderColor","color","mode","after","wide","position","bottom","backgroundColor","background","borderTopLeftRadius","borderTopRightRadius","boxSizing","paddingRight","fontWeight","alignItems","key","margin","size","shadow","fill","padding","asideContent","zIndex","selected","data-story","text","label","separator","borderRadius","before","weight","top","query","ns","apikey","modules","defaultState","center","zoom","geometry","options","preset","iconColor","properties","hintContent","boxShadow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.23d98f90.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport {\r\n  View,\r\n  Panel,\r\n  PanelHeader,\r\n  PanelHeaderBack,\r\n  PanelHeaderButton,\r\n  PanelHeaderContent,\r\n  Group,\r\n  Button,\r\n  Div,\r\n  Cell,\r\n  Card,\r\n  Separator,\r\n  HorizontalScroll,\r\n  Switch,\r\n  Avatar,\r\n  Tabs,\r\n  TabsItem,\r\n  CardGrid,\r\n  SimpleCell,\r\n  Text,\r\n  Tabbar,\r\n  TabbarItem,\r\n  FixedLayout,\r\n  Search,\r\n} from \"@vkontakte/vkui\";\r\nimport \"@vkontakte/vkui/dist/vkui.css\";\r\nimport { YMaps, Map, Placemark } from \"react-yandex-maps\";\r\nimport Icon24Done from \"@vkontakte/icons/dist/24/done\";\r\nimport Icon16Dropdown from \"@vkontakte/icons/dist/16/dropdown\";\r\nimport Icon28SmileOutline from \"@vkontakte/icons/dist/28/smile_outline\";\r\nimport Icon28AddOutline from \"@vkontakte/icons/dist/28/add_outline\";\r\nimport Icon28CameraOutline from \"@vkontakte/icons/dist/28/camera_outline\";\r\nimport Icon28UserOutline from \"@vkontakte/icons/dist/28/user_outline\";\r\nimport Icon28GlobeOutline from \"@vkontakte/icons/dist/28/globe_outline\";\r\nimport Icon28NewsfeedOutline from \"@vkontakte/icons/dist/28/newsfeed_outline\";\r\nimport Icon28ServicesOutline from \"@vkontakte/icons/dist/28/services_outline\";\r\nimport Icon28MessageOutline from \"@vkontakte/icons/dist/28/message_outline\";\r\nimport Icon28ClipOutline from \"@vkontakte/icons/dist/28/clip_outline\";\r\nimport Icon28UserCircleOutline from \"@vkontakte/icons/dist/28/user_circle_outline\";\r\nimport Icon24DismissSubstract from '@vkontakte/icons/dist/24/dismiss_substract';\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [currentPanel, setCurrentPanel] = React.useState(\"feed\");\r\n  const [moods, setMoods] = React.useState([\r\n    {\r\n      id: 0,\r\n      title: \"Карантин\",\r\n      isActive: true,\r\n    },\r\n    {\r\n      id: 1,\r\n      title: \"Работа\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Юмор\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"IT\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"Спорт\",\r\n      isActive: true,\r\n    },\r\n    {\r\n      id: 5,\r\n      title: \"Учеба\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      id: 6,\r\n      title: \"Скучно\",\r\n      isActive: false,\r\n    },\r\n    {\r\n      id: 7,\r\n      title: \"Засыпаю\",\r\n      isActive: false,\r\n    },\r\n  ]);\r\n  const [visible, setVisible] = React.useState(false);\r\n\r\n  const setActiveMood = (id) => {\r\n    const newMoods = moods.map((mood) => {\r\n      {\r\n        if (mood.id === id) {\r\n          mood.isActive = true;\r\n        } else {\r\n          mood.isActive = false;\r\n        }\r\n      }\r\n      return mood;\r\n    });\r\n    setMoods(newMoods);\r\n  };\r\n\r\n  return (\r\n    <View activePanel={currentPanel}>\r\n      <Panel id=\"createPost\">\r\n        <PanelHeader\r\n          left={<PanelHeaderBack onClick={() => setCurrentPanel(\"feed\")} />}\r\n          right={\r\n            <PanelHeaderButton onClick={() => setCurrentPanel(\"feed\")}>\r\n              <Icon24Done height={28} width={28} />\r\n            </PanelHeaderButton>\r\n          }\r\n        >\r\n          <PanelHeaderContent aside={<Icon16Dropdown />}>\r\n            Марк Никерин\r\n          </PanelHeaderContent>\r\n        </PanelHeader>\r\n        <Group>\r\n          <Div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n          >\r\n            <textarea\r\n              style={{\r\n                fontSize: \"16px\",\r\n                width: \"100%\",\r\n                height: \"50vh\",\r\n                marginBottom: \"20vh\",\r\n                border: \"none\",\r\n                outline: \"none\",\r\n              }}\r\n              placeholder=\"Начните вводить текст\"\r\n            >\r\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\r\n              enim ad minim veniam, quis nostrud exercitation ullamco laboris\r\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\r\n              nulla pariatur. Excepteur sint occaecat cupidatat non proident,\r\n              sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n            </textarea>\r\n          </Div>\r\n          <HorizontalScroll>\r\n            <div style={{ display: \"flex\" }}>\r\n              <Button\r\n                style={{\r\n                  marginLeft: \"12px\",\r\n                  marginRight: \"12px\",\r\n                  width: \"200px\",\r\n                  borderColor: \"#E1E3E6\",\r\n                  color: \"#818C99\",\r\n                }}\r\n                mode=\"outline\"\r\n                after={<Icon16Dropdown />}\r\n                onClick={() => {\r\n                  setVisible(true);\r\n                }}\r\n              >\r\n                Настроение\r\n              </Button>\r\n            </div>\r\n          </HorizontalScroll>\r\n          <Div></Div>\r\n          <Separator wide />\r\n          {visible === true && (\r\n            <>\r\n              <Group\r\n                style={{\r\n                  height: \"100vh\",\r\n                  width: \"100vw\",\r\n                  position: \"fixed\",\r\n                  bottom: \"0px\",\r\n                  backgroundColor: \"RGBA(0, 0, 0, 0.5)\",\r\n                }}\r\n                onClick={() => {\r\n                  setVisible(false);\r\n                }}\r\n              />\r\n              <Div\r\n                style={{\r\n                  position: \"fixed\",\r\n                  width: \"100vw\",\r\n                  background: \"#ffffff\",\r\n                  bottom: \"0px\",\r\n                  borderTopLeftRadius: \"10px\",\r\n                  borderTopRightRadius: \"10px\",\r\n                  boxSizing: \"border-box\",\r\n                  paddingRight: \"0px\",\r\n                }}\r\n              >\r\n                <Div style={{ fontWeight: \"600\" }}>Выберите настроение</Div>\r\n                <HorizontalScroll>\r\n                  <Div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"space-between\",\r\n                      alignItems: \"center\",\r\n                      marginLeft: \"-14px\",\r\n                    }}\r\n                  >\r\n                    {moods.map((mood) => {\r\n                      return mood.isActive ? (\r\n                        <div\r\n                          key={mood.id}\r\n                          style={{\r\n                            display: \"flex\",\r\n                            margin: \"12px\",\r\n                            flexDirection: \"column\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                          onClick={() => {\r\n                            setActiveMood(mood.id);\r\n                          }}\r\n                        >\r\n                          <Avatar\r\n                            style={{\r\n                              background: \"#ffffff\",\r\n                              border: \"1px solid #3F8AE0\",\r\n                            }}\r\n                            size={54}\r\n                            shadow={false}\r\n                          >\r\n                            <Icon28SmileOutline fill=\"#3F8AE0\" />\r\n                          </Avatar>\r\n                          <span>{mood.title}</span>\r\n                        </div>\r\n                      ) : (\r\n                        <div\r\n                          key={mood.id}\r\n                          style={{\r\n                            display: \"flex\",\r\n                            margin: \"12px\",\r\n                            flexDirection: \"column\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                          onClick={() => {\r\n                            setActiveMood(mood.id);\r\n                          }}\r\n                        >\r\n                          <Avatar\r\n                            style={{\r\n                              background: \"#ffffff\",\r\n                              border: \"1px solid #E1E3E6\",\r\n                            }}\r\n                            size={54}\r\n                            shadow={false}\r\n                          >\r\n                            <Icon28SmileOutline fill=\"#3F8AE0\" />\r\n                          </Avatar>\r\n                          <span>{mood.title}</span>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </Div>\r\n                </HorizontalScroll>\r\n                <Div\r\n                  style={{\r\n                    padding: \"16px 0\",\r\n                    marginRight: \"16px\",\r\n                  }}\r\n                >\r\n                  <Cell asideContent={<Switch />}>\r\n                    Добавить на карту настроений\r\n                  </Cell>\r\n                  <Div></Div>\r\n                  <Button\r\n                    size=\"xl\"\r\n                    onClick={() => {\r\n                      setVisible(false);\r\n                    }}\r\n                  >\r\n                    Готово\r\n                  </Button>\r\n                </Div>\r\n              </Div>\r\n            </>\r\n          )}\r\n        </Group>\r\n      </Panel>\r\n      <Panel id=\"feed\">\r\n        <FixedLayout>\r\n          <Tabbar style={{ zIndex: \"77\", background: \"#ffffff\" }}>\r\n            <TabbarItem selected={true} data-story=\"feed\" text=\"Новости\">\r\n              <Icon28NewsfeedOutline />\r\n            </TabbarItem>\r\n            <TabbarItem data-story=\"services\" text=\"Сервисы\">\r\n              <Icon28ServicesOutline />\r\n            </TabbarItem>\r\n            <TabbarItem data-story=\"messages\" label=\"12\" text=\"Сообщения\">\r\n              <Icon28MessageOutline />\r\n            </TabbarItem>\r\n            <TabbarItem data-story=\"clips\" text=\"Клипы\">\r\n              <Icon28ClipOutline />\r\n            </TabbarItem>\r\n            <TabbarItem data-story=\"profile\" text=\"Профиль\">\r\n              <Icon28UserCircleOutline />\r\n            </TabbarItem>\r\n          </Tabbar>\r\n        </FixedLayout>\r\n        <PanelHeader\r\n          left={\r\n            <PanelHeaderButton>\r\n              <Icon28CameraOutline />\r\n            </PanelHeaderButton>\r\n          }\r\n          right={\r\n            <PanelHeaderButton>\r\n              <Icon28AddOutline />\r\n            </PanelHeaderButton>\r\n          }\r\n          separator={true}\r\n        >\r\n          <Tabs>\r\n            <TabsItem\r\n              selected={true}\r\n              after={<Icon16Dropdown fill=\"var(--accent)\" />}\r\n            >\r\n              Новости\r\n            </TabsItem>\r\n            <TabsItem selected={false}>Интересное</TabsItem>\r\n          </Tabs>\r\n        </PanelHeader>\r\n        <Icon28GlobeOutline\r\n          fill=\"#ffffff\"\r\n          width={32}\r\n          height={32}\r\n          style={{\r\n            zIndex: \"99\",\r\n            padding: \"5px\",\r\n            background: \"#3F8AE0\",\r\n            borderRadius: \"50%\",\r\n            position: \"fixed\",\r\n            bottom: \"70px\",\r\n            right: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            setCurrentPanel(\"moodMap\");\r\n          }}\r\n        ></Icon28GlobeOutline>\r\n        <Div style={{ zIndex: \"1\" }}>\r\n          <CardGrid style={{ bottom: \"56px\" }}>\r\n            <Card\r\n              size=\"l\"\r\n              mode=\"outline\"\r\n              onClick={() => setCurrentPanel(\"createPost\")}\r\n            >\r\n              <Group>\r\n                <SimpleCell\r\n                  before={\r\n                    <Avatar>\r\n                      <Icon28UserOutline></Icon28UserOutline>\r\n                    </Avatar>\r\n                  }\r\n                >\r\n                  <Text weight=\"semibold\">Марк Никерин</Text>\r\n                </SimpleCell>\r\n                <Div>\r\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed\r\n                  do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n                  Ut enim ad minim veniam, quis nostrud exercitation ullamco\r\n                  laboris nisi ut aliquip ex ea commodo consequat. Duis aute\r\n                  irure dolor in reprehenderit in voluptate velit esse cillum\r\n                  dolore eu fugiat nulla pariatur. Excepteur sint occaecat\r\n                  cupidatat non proident, sunt in culpa qui officia deserunt\r\n                  mollit anim id est laborum.\r\n                </Div>\r\n                <Div></Div>\r\n              </Group>\r\n            </Card>\r\n            <Card\r\n              size=\"l\"\r\n              mode=\"outline\"\r\n              onClick={() => setCurrentPanel(\"createPost\")}\r\n            >\r\n              <Group>\r\n                <SimpleCell\r\n                  before={\r\n                    <Avatar>\r\n                      <Icon28UserOutline></Icon28UserOutline>\r\n                    </Avatar>\r\n                  }\r\n                >\r\n                  <Text weight=\"semibold\">Марк Никерин</Text>\r\n                </SimpleCell>\r\n                <Div>\r\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed\r\n                  do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n                  Ut enim ad minim veniam, quis nostrud exercitation ullamco\r\n                  laboris nisi ut aliquip ex ea commodo consequat. Duis aute\r\n                  irure dolor in reprehenderit in voluptate velit esse cillum\r\n                  dolore eu fugiat nulla pariatur. Excepteur sint occaecat\r\n                  cupidatat non proident, sunt in culpa qui officia deserunt\r\n                  mollit anim id est laborum.\r\n                </Div>\r\n                <Div></Div>\r\n              </Group>\r\n            </Card>\r\n            <Card\r\n              size=\"l\"\r\n              mode=\"outline\"\r\n              onClick={() => setCurrentPanel(\"createPost\")}\r\n            >\r\n              <Group>\r\n                <SimpleCell\r\n                  before={\r\n                    <Avatar>\r\n                      <Icon28UserOutline></Icon28UserOutline>\r\n                    </Avatar>\r\n                  }\r\n                >\r\n                  <Text weight=\"semibold\">Марк Никерин</Text>\r\n                </SimpleCell>\r\n                <Div>\r\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed\r\n                  do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n                  Ut enim ad minim veniam, quis nostrud exercitation ullamco\r\n                  laboris nisi ut aliquip ex ea commodo consequat. Duis aute\r\n                  irure dolor in reprehenderit in voluptate velit esse cillum\r\n                  dolore eu fugiat nulla pariatur. Excepteur sint occaecat\r\n                  cupidatat non proident, sunt in culpa qui officia deserunt\r\n                  mollit anim id est laborum.\r\n                </Div>\r\n                <Div></Div>\r\n              </Group>\r\n            </Card>\r\n          </CardGrid>\r\n        </Div>\r\n      </Panel>\r\n      <Panel id=\"moodMap\">\r\n        <Icon24DismissSubstract fill=\"RGBA(0,0,0,0.5)\"\r\n          width={32}\r\n          height={32}\r\n          style={{\r\n            zIndex: \"99\",\r\n            background: \"#FFFFFF\",\r\n            borderRadius: \"50%\",\r\n            position: \"fixed\",\r\n            top: \"30px\",\r\n            right: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            setCurrentPanel(\"feed\");\r\n          }}></Icon24DismissSubstract>\r\n        <YMaps\r\n          query={{\r\n            ns: \"use-load-option\",\r\n            apikey: \"c27f119f-4abb-4015-8b10-6fbe8c74a51c\",\r\n          }}\r\n        >\r\n          <Map\r\n            modules={[\"geolocation\", \"geocode\", \"geoObject.addon.hint\"]}\r\n            width={\"100vw\"}\r\n            height={\"100vh\"}\r\n            defaultState={{\r\n              center: [55.75, 37.57],\r\n              zoom: 11,\r\n            }}\r\n          >\r\n            <Placemark\r\n              key={1}\r\n              geometry={[55.751, 37.569]}\r\n              options={{\r\n                preset: \"islands#circleIcon\",\r\n                iconColor: \"#3F8AE0\",\r\n              }}\r\n              properties={{ hintContent: \"dsfaaaaaaaaaaaaaa\" }}\r\n              onClick={() => setCurrentPanel(\"moodFeed\")}\r\n            />\r\n            <Placemark\r\n              key={2}\r\n              geometry={[55.764, 37.581]}\r\n              options={{\r\n                preset: \"islands#circleIcon\",\r\n                iconColor: \"#3F8AE0\",\r\n              }}\r\n              properties={{ hintContent: \"dsfds\" }}\r\n              onClick={() => setCurrentPanel(\"moodFeed\")}\r\n            />\r\n          </Map>\r\n        </YMaps>\r\n        <Div\r\n          style={{\r\n            position: \"fixed\",\r\n            background: \"#ffffff\",\r\n            borderTopRightRadius: \"15px\",\r\n            boxShadow: \"0 0 10px rgba(0,0,0,0.3)\",\r\n            borderTopLeftRadius: \"15px\",\r\n            width: \"100vw\",\r\n            bottom: \"0px\",\r\n            right: \"0px\",\r\n            padding: \"0px\",\r\n          }}\r\n        >\r\n          <Div></Div>\r\n          <Search after={null} />\r\n          <HorizontalScroll>\r\n            <Div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              {moods.map((mood) => {\r\n                return mood.isActive ? (\r\n                  <div\r\n                    key={mood.id}\r\n                    style={{\r\n                      display: \"flex\",\r\n                      margin: \"6px\",\r\n                      flexDirection: \"column\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setActiveMood(mood.id);\r\n                    }}\r\n                  >\r\n                    <Avatar\r\n                      style={{\r\n                        background: \"#ffffff\",\r\n                        border: \"1px solid #3F8AE0\",\r\n                      }}\r\n                      size={54}\r\n                      shadow={false}\r\n                    >\r\n                      <Icon28SmileOutline fill=\"#3F8AE0\" />\r\n                    </Avatar>\r\n                    <span>{mood.title}</span>\r\n                  </div>\r\n                ) : (\r\n                  <div\r\n                    key={mood.id}\r\n                    style={{\r\n                      display: \"flex\",\r\n                      margin: \"6px\",\r\n                      flexDirection: \"column\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setActiveMood(mood.id);\r\n                    }}\r\n                  >\r\n                    <Avatar\r\n                      style={{\r\n                        background: \"#ffffff\",\r\n                        border: \"1px solid #E1E3E6\",\r\n                      }}\r\n                      size={54}\r\n                      shadow={false}\r\n                    >\r\n                      <Icon28SmileOutline fill=\"#3F8AE0\" />\r\n                    </Avatar>\r\n                    <span>{mood.title}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </Div>\r\n          </HorizontalScroll>\r\n        </Div>\r\n      </Panel>\r\n      <Panel id=\"moodFeed\">\r\n        <FixedLayout>\r\n          <Tabbar style={{ zIndex: \"77\", background: \"#ffffff\" }}>\r\n            <TabbarItem selected={true} data-story=\"feed\" text=\"Новости\">\r\n              <Icon28NewsfeedOutline />\r\n            </TabbarItem>\r\n            <TabbarItem data-story=\"services\" text=\"Сервисы\">\r\n              <Icon28ServicesOutline />\r\n            </TabbarItem>\r\n            <TabbarItem data-story=\"messages\" label=\"12\" text=\"Сообщения\">\r\n              <Icon28MessageOutline />\r\n            </TabbarItem>\r\n            <TabbarItem data-story=\"clips\" text=\"Клипы\">\r\n              <Icon28ClipOutline />\r\n            </TabbarItem>\r\n            <TabbarItem data-story=\"profile\" text=\"Профиль\">\r\n              <Icon28UserCircleOutline />\r\n            </TabbarItem>\r\n          </Tabbar>\r\n        </FixedLayout>\r\n        <PanelHeader\r\n          left={<PanelHeaderBack onClick={() => setCurrentPanel(\"moodMap\")} />}\r\n        >\r\n          Лента настроения\r\n        </PanelHeader>\r\n        <Div style={{ zIndex: \"1\" }}>\r\n          <CardGrid style={{ bottom: \"56px\" }}>\r\n            <Card\r\n              size=\"l\"\r\n              mode=\"outline\"\r\n            >\r\n              <Group>\r\n                <SimpleCell\r\n                  before={\r\n                    <Avatar>\r\n                      <Icon28UserOutline></Icon28UserOutline>\r\n                    </Avatar>\r\n                  }\r\n                >\r\n                  <Text weight=\"semibold\">Сергей Андреев</Text>\r\n                </SimpleCell>\r\n                <Div>\r\n                  Как же здесь круто! Очень классное место!\r\n                </Div>\r\n                <Div></Div>\r\n              </Group>\r\n            </Card>\r\n            <Card\r\n              size=\"l\"\r\n              mode=\"outline\"\r\n            >\r\n              <Group>\r\n                <SimpleCell\r\n                  before={\r\n                    <Avatar>\r\n                      <Icon28UserOutline></Icon28UserOutline>\r\n                    </Avatar>\r\n                  }\r\n                >\r\n                  <Text weight=\"semibold\">Дмитрий Иванов</Text>\r\n                </SimpleCell>\r\n                <Div>\r\n                  Наконец-то я защитил диплом! 4 года тяжелой учебы позади, а впереди - новая жизнь!\r\n                </Div>\r\n                <Div></Div>\r\n              </Group>\r\n            </Card>\r\n            <Card\r\n              size=\"l\"\r\n              mode=\"outline\"\r\n            >\r\n              <Group>\r\n                <SimpleCell\r\n                  before={\r\n                    <Avatar>\r\n                      <Icon28UserOutline></Icon28UserOutline>\r\n                    </Avatar>\r\n                  }\r\n                >\r\n                  <Text weight=\"semibold\">Марк Никерин</Text>\r\n                </SimpleCell>\r\n                <Div>\r\n                  Вот и заканчивается хакатон Вездекод от ВКонтакте! Очень интересный опыт, спасибо организаторам и проверяющим за их труд!))\r\n                </Div>\r\n                <Div></Div>\r\n              </Group>\r\n            </Card>\r\n          </CardGrid>\r\n        </Div>\r\n      </Panel>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}